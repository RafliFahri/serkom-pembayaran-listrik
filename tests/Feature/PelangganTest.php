<?php

namespace Tests\Feature;

use App\Models\Pelanggan;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PelangganTest extends TestCase
{
    private $user;
    private $pelanggan;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::where('username', 'admin')->where('password', 'admin')->first();
        $this->pelanggan = Pelanggan::factory()->make(['nama_pelanggan' => 'pelanggan123', 'password' => 'pelanggan123',]);
    }
    public function test_admin_can_see_data_pelanggan(): void
    {
        $response = $this->actingAs($this->user, 'admin')->get('/admin/pelanggan');
        $response->assertStatus(200)
            ->assertSee('Data Pelanggan');
    }
    public function test_admin_can_create_new_pelanggan(): void
    {
        $response = $this->actingAs($this->user, 'admin')->post('/admin/pelanggan/',
        [
            'username' => $this->pelanggan->username, 'password' => $this->pelanggan->password,
            'nomor_kwh' => $this->pelanggan->nomor_kwh, 'nama_pelanggan' => $this->pelanggan->nama_pelanggan,
            'alamat' => $this->pelanggan->alamat, 'daya' => $this->pelanggan->id_tarif,
        ]);
        $response->assertStatus(302)->assertRedirect('/admin/pelanggan');
        $this->assertDatabaseHas('pelanggan', ['nama_pelanggan' => $this->pelanggan->nama_pelanggan]);
    }
    public function test_admin_create_new_pelanggan_with_empty_data(): void
    {
        $response = $this->actingAs($this->user, 'admin')->post('/admin/pelanggan/', [
            'username' => '', 'password' => '', 'nomor_kwh' => '',
            'nama_pelanggan' => '', 'alamat' => '', 'daya' => ''
        ]);
        $response->assertStatus(302)
            ->assertSessionHasErrors(['username', 'password', 'nomor_kwh', 'nama_pelanggan', 'alamat', 'daya']);
        $this->assertDatabaseMissing('pelanggan', ['username' => '', 'password' => '', 'nomor_kwh' => '', 'nama_pelanggan' => '', 'alamat' => '']);
    }
    public function test_admin_can_see_edit_pelanggan(): void
    {
        $pelanggan = Pelanggan::where('nama_pelanggan', 'pelanggan123')->first();
        $response = $this->actingAs($this->user, 'admin')->get('/admin/pelanggan/' . $pelanggan->id_pelanggan . '/edit');
        $response->assertStatus(200)
            ->assertSee('Edit Pelanggan')->assertSee($this->pelanggan->nama_pelanggan);
    }
    public function test_admin_can_update_pelanggan(): void
    {
        $pelanggan = Pelanggan::where('nama_pelanggan', 'pelanggan123')->first();
        $response = $this->actingAs($this->user, 'admin')->patch('/admin/pelanggan/'.$pelanggan->id_pelanggan, [
            'username' => 'fikri.afriza',
            'password' => 'fikriafriza',
            'nomor_kwh' => $this->pelanggan->nomor_kwh,
            'nama_pelanggan' => 'Fikri Afriza',
            'alamat' => 'Jl. Hj. Rada Radi Ridi',
            'daya' => $this->pelanggan->id_tarif,
        ]);
        $response->assertStatus(302)->assertRedirect('/admin/pelanggan');
        $this->assertDatabaseHas('pelanggan', ['nama_pelanggan' => 'Fikri Afriza', 'password' => 'fikriafriza']);
    }
    public function test_admin_can_delete_pelanggan(): void
    {
        $pelanggan = Pelanggan::where('username', 'fikri.afriza')->first();
        $response = $this->actingAs($this->user, 'admin')->delete('/admin/pelanggan/'.$pelanggan->id_pelanggan);
        $response->assertRedirect('/admin/pelanggan');
        $this->assertDatabaseMissing('pelanggan', ['username' => 'fikri.afriza']);
    }
}
